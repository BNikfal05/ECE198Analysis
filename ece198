<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BCI Research Barriers Survey Results</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.27.1/plotly.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        select {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .charts-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        .chart {
            min-height: 400px;
        }
        #statsContainer {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        .loading {
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
        }
        .error {
            color: #dc3545;
            padding: 10px;
            border: 1px solid #dc3545;
            border-radius: 4px;
            margin: 10px 0;
        }
        .survey-link {
            text-align: center;
            margin-top: 30px;
        }
        .survey-link a {
            color: #007bff;
            text-decoration: none;
            font-size: 18px;
        }
        .survey-link a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>BCI Research Barriers Survey Results</h1>
        <label for="questionSelect">Select a Question:</label>
        <select id="questionSelect"></select>
        <div class="charts-container">
            <div id="barChart" class="chart"></div>
            <div id="pieChart" class="chart"></div>
        </div>
        <div id="statsContainer"></div>
        <div class="survey-link">
            <p>Want to participate in the survey?</p>
            <a href="YOUR_SURVEY_LINK" target="_blank">Click here to take the survey</a>
        </div>
    </div>

    <script>
        const SHEETY_API = 'https://api.sheety.co/fd858b8093c57d25bb7823968ebcc9bd/bciResearchBarriersInquiry (réponses)/réponsesAuFormulaire1';
        let surveyData = null;

        function formatQuestionLabel(question) {
            // Keep BCI acronym but handle other capitalizations
            let formatted = question.replace(/BCI/gi, 'BCI');
            
            // Add spaces before capital letters
            formatted = formatted.replace(/([a-z])([A-Z])/g, '$1 $2');
            
            // Capitalize first letter of each word
            return formatted.replace(/\w\S*/g, txt =>
                txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
            );
        }

        function calculateStats(values) {
            const sum = values.reduce((a, b) => a + b, 0);
            const mean = sum / values.length;
            const stdDev = Math.sqrt(
                values.reduce((sq, n) => sq + Math.pow(n - mean, 2), 0) / values.length
            );
            const range = Math.max(...values) - Math.min(...values);
            const percentages = values.map(count => (count / sum * 100).toFixed(2));
            
            const skewness = values.reduce((acc, val) =>
                acc + Math.pow((val - mean) / stdDev, 3), 0
            ) / values.length;

            return {mean, stdDev, range, sum, percentages, skewness};
        }

        function updateVisualization(selectedQuestion) {
            if (!surveyData) return;

            const responses = surveyData.map(row => row[selectedQuestion])
                .filter(response => response !== null && response !== undefined);
            
            const valueCounts = responses.reduce((acc, val) => {
                acc[val] = (acc[val] || 0) + 1;
                return acc;
            }, {});

            const values = Object.keys(valueCounts);
            const counts = Object.values(valueCounts);
            const stats = calculateStats(counts);

            // Bar Chart
            const barTrace = {
                x: values,
                y: counts,
                type: 'bar',
                marker: {
                    color: 'rgb(55, 83, 109)',
                    opacity: 0.7
                },
                name: 'Responses'
            };

            const barLayout = {
                title: {
                    text: 'Response Distribution',
                    font: {size: 16}
                },
                xaxis: {
                    title: 'Response',
                    tickangle: -45
                },
                yaxis: {
                    title: 'Count',
                    rangemode: 'nonnegative'
                },
                margin: {
                    b: 100
                }
            };

            // Pie Chart
            const pieTrace = {
                values: counts,
                labels: values,
                type: 'pie',
                textinfo: 'label+percent',
                textposition: 'inside',
                automargin: true
            };

            const pieLayout = {
                title: {
                    text: 'Response Percentages',
                    font: {size: 16}
                },
                showlegend: true,
                legend: {
                    orientation: 'h',
                    y: -0.1
                },
                margin: {
                    t: 50,
                    b: 50
                }
            };

            Plotly.newPlot('barChart', [barTrace], barLayout);
            Plotly.newPlot('pieChart', [pieTrace], pieLayout);

            // Update statistics
            document.getElementById('statsContainer').innerHTML = `
                <h3>Statistical Analysis: ${formatQuestionLabel(selectedQuestion)}</h3>
                <p>Mean (Average Response Count): ${stats.mean.toFixed(2)}</p>
                <p>Standard Deviation: ${stats.stdDev.toFixed(2)}</p>
                <p>Range (Max - Min): ${stats.range}</p>
                <p>Skewness: ${stats.skewness.toFixed(2)}
                    (${stats.skewness > 0 ? 'Right' : 'Left'}-skewed distribution)</p>
                <p>Total Responses: ${stats.sum}</p>
                <p>Percentage Distribution:</p>
                <ul>
                    ${values.map((value, i) =>
                        `<li>${value}: ${stats.percentages[i]}%</li>`
                    ).join('')}
                </ul>
            `;
        }

        async function fetchSurveyData() {
            try {
                const response = await fetch(SHEETY_API);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                return data.réponsesAuFormulaire1;
            } catch (error) {
                console.error('Error fetching data:', error);
                document.querySelector('.charts-container').innerHTML = `
                    <div class="error">
                        Error loading survey data. Please try again later.
                    </div>
                `;
                throw error;
            }
        }

        async function initializePage() {
            try {
                surveyData = await fetchSurveyData();
                
                const questions = Object.keys(surveyData[0])
                    .filter(key => key !== 'id');

                const select = document.getElementById('questionSelect');
                questions.forEach(question => {
                    const option = document.createElement('option');
                    option.value = question;
                    option.textContent = formatQuestionLabel(question);
                    select.appendChild(option);
                });

                select.addEventListener('change', (e) => {
                    updateVisualization(e.target.value);
                });

                updateVisualization(questions[0]);
            } catch (error) {
                console.error('Error initializing page:', error);
            }
        }

        window.onload = initializePage;
    </script>
</body>
</html>
